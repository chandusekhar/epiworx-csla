<%@ CodeTemplate 
    Language="C#" 
    TargetLanguage="C#" 
    Src="../TemplateBase.cs" 
	Inherits="CodeSmith.Csla.TemplateBase" 
    Debug="False" 
    CompilerVersion="v3.5" 
	Description="Template description here." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Linq.Dynamic;
using System.Text;

namespace <%= NamespaceName %>.Data.EntityFramework
{
    public class <%= ClassName%>DataFactory : I<%= ClassName%>DataFactory
    {
        public <%= ClassName%>Data Fetch(<%= ClassName%>DataCriteria criteria)
        {
            using (var ctx = Csla.Data.ObjectContextManager<ApplicationEntities>
                         .GetManager(Database.ApplicationConnection, false))
            {
                var <%= StringUtil.ToCamelCase(ClassName) %> = this.Fetch(ctx, criteria)
                    .Single();

                var <%= StringUtil.ToCamelCase(ClassName) %>Data = new <%= ClassName%>Data();

                this.Fetch(<%= StringUtil.ToCamelCase(ClassName) %>, <%= StringUtil.ToCamelCase(ClassName) %>Data);

                return <%= StringUtil.ToCamelCase(ClassName) %>Data;
            }
        }

        public <%= ClassName%>Data[] FetchInfoList(<%= ClassName%>DataCriteria criteria)
        {
            using (var ctx = Csla.Data.ObjectContextManager<ApplicationEntities>
                          .GetManager(Database.ApplicationConnection, false))
            {
                var <%= StringUtil.ToCamelCase(ClassName) %>s = this.Fetch(ctx, criteria)
                    .AsEnumerable();

                var <%= StringUtil.ToCamelCase(ClassName) %>DataList = new List<<%= ClassName%>Data>();

                foreach (var <%= StringUtil.ToCamelCase(ClassName) %> in <%= StringUtil.ToCamelCase(ClassName) %>s)
                {
                    var <%= StringUtil.ToCamelCase(ClassName) %>Data = new <%= ClassName%>Data();

                    this.Fetch(<%= StringUtil.ToCamelCase(ClassName) %>, <%= StringUtil.ToCamelCase(ClassName) %>Data);

                    <%= StringUtil.ToCamelCase(ClassName) %>DataList.Add(<%= StringUtil.ToCamelCase(ClassName) %>Data);
                }

                return <%= StringUtil.ToCamelCase(ClassName) %>DataList.ToArray();
            }
        }

        public <%= ClassName%>Data[] FetchLookupInfoList(<%= ClassName%>DataCriteria criteria)
        {
            using (var ctx = Csla.Data.ObjectContextManager<ApplicationEntities>
                          .GetManager(Database.ApplicationConnection, false))
            {
                var <%= StringUtil.ToCamelCase(ClassName) %>s = this.Fetch(ctx, criteria)
                    .AsEnumerable();

                var <%= StringUtil.ToCamelCase(ClassName) %>DataList = new List<<%= ClassName%>Data>();

                foreach (var <%= StringUtil.ToCamelCase(ClassName) %> in <%= StringUtil.ToCamelCase(ClassName) %>s)
                {
                    var <%= StringUtil.ToCamelCase(ClassName) %>Data = new <%= ClassName%>Data();

                    this.Fetch(<%= StringUtil.ToCamelCase(ClassName) %>, <%= StringUtil.ToCamelCase(ClassName) %>Data);

                    <%= StringUtil.ToCamelCase(ClassName) %>DataList.Add(<%= StringUtil.ToCamelCase(ClassName) %>Data);
                }

                return <%= StringUtil.ToCamelCase(ClassName) %>DataList.ToArray();
            }
        }

        public <%= ClassName%>Data Create()
        {
            return new <%= ClassName%>Data();
        }

        public <%= ClassName%>Data Update(<%= ClassName%>Data data)
        {
            using (var ctx = Csla.Data.ObjectContextManager<ApplicationEntities>
                         .GetManager(Database.ApplicationConnection, false))
            {
                var <%= StringUtil.ToCamelCase(ClassName) %> =
                    new <%= ClassName%>
                    {
                        <%= ClassName%>Id = data.<%= ClassName%>Id
                    };

                ctx.ObjectContext.<%= ClassPluralName%>.Attach(<%= StringUtil.ToCamelCase(ClassName) %>);

                DataMapper.Map(data, <%= StringUtil.ToCamelCase(ClassName) %>);

                ctx.ObjectContext.SaveChanges();

                return data;
            }
        }

        public <%= ClassName%>Data Insert(<%= ClassName%>Data data)
        {
            using (var ctx = Csla.Data.ObjectContextManager<ApplicationEntities>
                           .GetManager(Database.ApplicationConnection, false))
            {
                var <%= StringUtil.ToCamelCase(ClassName) %> = new <%= ClassName%>();

                DataMapper.Map(data, <%= StringUtil.ToCamelCase(ClassName) %>);

                ctx.ObjectContext.AddTo<%= ClassPluralName%>(<%= StringUtil.ToCamelCase(ClassName) %>);

                ctx.ObjectContext.SaveChanges();

                data.<%= ClassName%>Id = <%= StringUtil.ToCamelCase(ClassName) %>.<%= ClassName%>Id;

                return data;
            }
        }

        public void Delete(<%= ClassName%>DataCriteria criteria)
        {
            using (var ctx = Csla.Data.ObjectContextManager<ApplicationEntities>
                          .GetManager(Database.ApplicationConnection, false))
            {
                var <%= StringUtil.ToCamelCase(ClassName) %> = this.Fetch(ctx, criteria)
                    .Single();

                ctx.ObjectContext.<%= ClassPluralName%>.DeleteObject(<%= StringUtil.ToCamelCase(ClassName) %>);

                ctx.ObjectContext.SaveChanges();
            }
        }

        private void Fetch(<%= ClassName%> <%= StringUtil.ToCamelCase(ClassName) %>, <%= ClassName%>Data <%= StringUtil.ToCamelCase(ClassName) %>Data)
        {
            DataMapper.Map(<%= StringUtil.ToCamelCase(ClassName) %>, <%= StringUtil.ToCamelCase(ClassName) %>Data);
        }

        private IQueryable<<%= ClassName%>> Fetch(
             Csla.Data.ObjectContextManager<ApplicationEntities> ctx,
             <%= ClassName%>DataCriteria criteria)
        {
            IQueryable<<%= ClassName%>> query = ctx.ObjectContext.<%= ClassPluralName%>;

            <% foreach (var column in this.SourceTable.Columns) {  
                
                if (column.DataType == DbType.Date 
                    || column.DataType == DbType.DateTime) { %>
            if (criteria.<%= column.Name %> != null
                && criteria.<%= column.Name %>.DateFrom.Date != DateTime.MinValue.Date)
            {
                query = query.Where(row => row.<%= column.Name %> >= criteria.<%= column.Name %>.DateFrom);
            }
            
            if (criteria.<%= column.Name %> != null
                && (criteria.<%= column.Name %>.DateTo.Date != DateTime.MaxValue.Date))
            {
                query = query.Where(row => row.<%= column.Name %> <= criteria.<%= column.Name %>.DateTo);
			}
                
                <% }  else  { %>
			if (criteria.<%= column.Name %> != null)
            {
                query = query.Where(row => row.<%= column.Name %> == criteria.<%= column.Name %>);
			}  
                
                <% } %> 
            <% } %>
            if (criteria.Text != null)
            {
                <% if (ToStringFormatMembers != null) { %>
                query = query.Where(row => row.<%= ToStringFormatMembers[0] %>.Contains(criteria.Text));
                <% } %>
            }
           
            if (criteria.SortBy != null)
            {
                query = query.OrderBy(string.Format(
                    "{0} {1}",
                    criteria.SortBy,
                    criteria.SortOrder == ListSortDirection.Ascending ? "ASC" : "DESC"));
            }

            if (criteria.SkipRecords != null)
            {
                query = query.Skip(criteria.SkipRecords.Value);
            }

            if (criteria.MaximumRecords != null)
            {
                query = query.Take(criteria.MaximumRecords.Value);
            }

            return query;
        }
    }
}
